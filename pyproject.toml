[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "Sports Betting"
# version is handled by setuptools_scm, which is driven by semantic-release
dependencies = [
    pytest,
    pytest-cov,
    black,
    isort,
    setuptools,
    codecov,
    coverage,
    sphinx-markdown-builder,
    Sphinx,
    requests
]
authors = [
    { name = "Adriano Lima", email = "adrianocardoso1991@gmail.com" },
]
description = "A simple sports betting package."
readme = "README.md"
requires-python = ">=3.12"
keywords = ["sports", "betting", "python"]
license = { file = "MIT License" }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

# Configure how setuptools finds your package
packages = [
    { include = "src/sports_betting" }
]

# This tells setuptools_scm where to write the version file for your package.
[tool.setuptools_scm]
write_to = "src/sports_betting/_version.py"

# Configuration for python-semantic-release
[tool.semantic_release]
# Specifies the Git branch that triggers releases
branch = "master"
# Define assets to upload to the release (e.g., wheels, source distribution)
# This will be generated by the `build` step in your workflow.
build_command = "python -m build" # Command to build your package artifacts
upload_to_pypi = false # Set to true if you want to publish to PyPI
upload_to_release = true # Uploads build artifacts to GitHub Release
changelog_file = "CHANGELOG.md" # Optional: Keeps an updated CHANGELOG.md file
# The version source tells semantic-release where to get the version from
# 'scm' means it will rely on setuptools_scm (which gets it from Git tags)
version_source = "scm"
# Tag format for git tags and releases (e.g., v1.2.3)
tag_format = "v{version}"
# Commit message types that trigger different release types
major_on_zero = false # Set to true if your initial 0.y.z releases should bump major for breaking changes
minor_without_commits = false # Set to true if minor should happen even if no 'feat' commits (rarely useful)
# Options for commit message types (e.g., 'feat', 'fix', 'build', 'chore', 'ci', 'docs', 'perf', 'refactor', 'revert', 'style', 'test')
